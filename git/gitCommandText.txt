
git基本概念： Workspace(工作区) ————————> Starge Area(暂存区) ————————> Local Repository(本地仓库) ————————> Remote Repository(远程仓库)
                               git add                      git commit                           git push
                               
                               <—————————————————————————————————————————————————————————————————————————
                                                                  git pull

git 回退：  第一种情况： 只在本地工作区修改了文件还没有提交到暂存区（即没有执行git add 命令）   git checkout .  or  git reset --hard
         
           第二种情况： (1. 不保留工作区的修改) 已将工作区的修改提交到了暂存区还没有提交到本地仓库（即执行了git add 还没执行 git commit）   
                       git reset ————> git checkout .   or   git reset --hard
                       
                       （原理：git reset 命令撤销git add 命令的提交，再执行git checkout . 放弃之前的修改）
                       
                       （2. 保留工作区的修改，撤销提交 sudo git reset HEAD .）
                     
           第三种情况： 已将暂存区的内容提交到本地仓库（还没有执行git push）   git reset --hard origin master(dev)  or git reset --hard HEAD^
            
                       （原理：此时本地仓库已经被污染，远程仓库还没有受影响，那就将远程仓库的代码取回到本地仓库）
                       
           第四种情况： 已将本地仓库的内容提交推送到了远程仓库（执行了git push）   git reset --hard HEAD^ ————> git push -f
           
                       (原理：执行git push后，本地仓库与远程仓库代码一样，已经等价，将本地仓库的代码回退到前一次提交，再将本地仓库的代码推向
                       远程仓库，进行覆盖。)
                       
                       (HEAD: 代表当前版本，HEAD^: 代表上一个版本，HEAD^^: 代表上上个版本，HEAD~100:代表上一百个版本)

mkdir filebname 创建文件夹

git add file 添加修改的文件到暂存区
git add --all . 把工作区所有改动文件添加到暂存区

git commit -m ""把暂存区的文件提交到仓库
git commit -am ""把暂存区的所有文件提交到仓库

git status 查看工作区与暂存区的文件差别

git diff 比较工作区与暂存区的文件的区别
git diff --cached 比较暂存区与本地仓库的区别
git diff master(dev) origin/master(dev) 比较本地仓库与远程仓库的区别

git log	查看提交日志

git reset --hard HEAD^  
          --hard commit Id(回退到指定版本)


git reflog 用来查看git commit与git reset的指令记录（查看commit id）

git checkout --file 丢弃工作区的修改

git push （-u(第一次将内容推送到远程库添加-u)）origin master

git remote add origin git@server-name
(github.com):lanyunys2015/repository-name.git

git branch 列出所有分支

git checkout -b branchName 表示创建分支并切换

git checkout -b dev origin/dev 创建dev分支并链接到远程dev分支上

git remote 查看远程仓库的信息

git checkout branchName (分支名) 切换分支

git merge branchName 合并指定分支到当前分支

git branch -d branchName 删除分支

git push origin --delete <branchName> 删除远程分支

git branch -r //查看远程所有分支

git branch -a //查看本地和远程的所有分支

git fetch <远程主机名> //这个命令将某个远程主机的更新全部取回本地

git fetch <远程主机名> <分支名> //注意之间有空格 取回特定分支的更新

git log FETCH_HEAD //查看刚取回的更新信息
